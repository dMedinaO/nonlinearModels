WorkFlow: RV-Clustering

Etapa 1: Evaluacion de linealidad del conjunto de datos

LauncherCheckNonLinear.py: evalua si el conjunto de datos presenta una respuesta del tipo lineal o no, aplicando una variaci√≥n del algoritmo Ho-Kashiap empleando
los algoritmos basados en metodos lineales para obtener una performance predictiva

usage: LauncherCheckNonLinear.py [-h] --dataset DATASET --type {1,2}
                                 [--threshold THRESHOLD] --feature FEATURE

optional arguments:
  -h, --help            show this help message and exit
  --dataset DATASET, -d DATASET
                        dataSet input to check data
  --type {1,2}, -k {1,2}
                        Kind of dataSet: 1 for classification models --- 2 for
                        predictive models
  --threshold THRESHOLD, -t THRESHOLD
                        threshold to consider in linear evaluation of response
                        in dataset
  --feature FEATURE, -f FEATURE
                        Name of feature with response in dataset

El threshold sirve para evaluar la linealidad del metodo, por default se utiliza 0.7 en la performance de Precission (modelos de clasificacion) o R score (modelos de regresion) de los modelos. Se recomiendan valores desde dicho umbral, ya que, a mayor precision, mejor es la calidad del modelo.

Retorna 0 si el conjunto de datos presenta respuesta no lineal
        1 en caso de que fuera lineal

Etapa 2: Exploracion de algoritmos y parametros

LauncherexploreRegressionModels.py | LauncherExploratoryClassifierModels.py: explora diferentes algoritmos y parametros para entrenar modelos sobre un mismo conjunto de datos, obtiene diferentes medidas de desempeno y compara las medidas con el umbral minimo en la medida de desempeno de precision (caso modelos de clasificacion) o R-score (caso modelos de regresion)

usage: LauncherExploratoryClassifierModels.py [-h] -d DATASET -p PATHRESULT -m
                                              PERFORMANCE -r RESPONSE -t
                                              THRESHOLD -k KVALUEDATA

optional arguments:
  -h, --help            show this help message and exit
  -d DATASET, --dataSet DATASET
                        full path and name to acces dataSet input process
  -p PATHRESULT, --pathResult PATHRESULT
                        full path for save results
  -m PERFORMANCE, --performance PERFORMANCE
                        performance selected model
  -r RESPONSE, --response RESPONSE
                        name of column with response values in dataset
  -t THRESHOLD, --threshold THRESHOLD
                        threshold of minimus values expected form model
                        generated
  -k KVALUEDATA, --kValueData KVALUEDATA
                        Value for cross validation, this value most be higher
                        or equal 2

usage: LauncherexploreRegressionModels.py [-h] -d DATASET -p PATHRESULT -m
                                          PERFORMANCE -r RESPONSE -t THRESHOLD

optional arguments:
  -h, --help            show this help message and exit
  -d DATASET, --dataSet DATASET
                        full path and name to acces dataSet input process
  -p PATHRESULT, --pathResult PATHRESULT
                        full path for save results
  -m PERFORMANCE, --performance PERFORMANCE
                        performance selected model
  -r RESPONSE, --response RESPONSE
                        name of column with response values in dataset
  -t THRESHOLD, --threshold THRESHOLD
                        threshold of minimus values expected form model
                        generated

Etapa 3: Dividir conjunto de datos en sub conjuntos empleando metodo recursivo de division propuesto, emplea y
valida las mejores divisiones generadas y obtiene los resultados. Se recomienda usar con un directorio exclusivo
para almacenar las particiones. Como output genera los archivos csv con la data original ademas de la estructura
de arbol con la visualizacion de las particiones

Script: launcherClusteringScan.py

usage: launcherClusteringScan.py [-h] -d DATASET -p PATHRESULT -r RESPONSE -k
                                 {1,2} -t THRESHOLD -s INITIALSIZE

optional arguments:
  -h, --help            show this help message and exit
  -d DATASET, --dataSet DATASET
                        full path and name to acces dataSet input process
  -p PATHRESULT, --pathResult PATHRESULT
                        full path for save results
  -r RESPONSE, --response RESPONSE
                        Name response in dataset
  -k {1,2}, --kind {1,2}
                        Kind of dataset: 1. Classification 2. Regression
  -t THRESHOLD, --threshold THRESHOLD
                        threshold for umbalanced class
  -s INITIALSIZE, --initialSize INITIALSIZE
                        initial Size of dataset

Etapa 4: Entrenar modelo de clasificacion para particiones, recibe el conjunto de datos resultado del launcherClusteringScan.py y
entrena un modelo, reporta las medidas de desempeno y genera multiples modelos, puede seleccionar cualquiera, ya que todos son
los mejores en su area.

Script: LauncherTrainingModelPartitions.py

usage: LauncherTrainingModelPartitions.py [-h] -d DATASET -p PATHRESULT -r
                                          RESPONSE [-k KVALUEDATA]

optional arguments:
  -h, --help            show this help message and exit
  -d DATASET, --dataSet DATASET
                        full path and name to acces dataSet input process
  -p PATHRESULT, --pathResult PATHRESULT
                        full path for save results
  -r RESPONSE, --response RESPONSE
                        name of column with response values in dataset
  -k KVALUEDATA, --kValueData KVALUEDATA
                        Value for cross validation, this value most be higher
                        or equal 2

Etapa 5: Entrenar modelos para las particiones, recibe el directorio donde se encuentran los archivos que se producen en la division
de los elementos a partir de la estrategia propuesta, produce los modelos y un archivo resumen con las medidas de desempeno, las
medidas ponderadas se reportan en terminal

Script: LauncherTrainingModelPartitionsGroups.py

usage: LauncherTrainingModelPartitionsGroups.py [-h] -p PATHINPUT -r RESPONSE
                                                [-k KVALUEDATA] -t {1,2}

optional arguments:
  -h, --help            show this help message and exit
  -p PATHINPUT, --pathInput PATHINPUT
                        Path where is all data set created using clustering
                        partitions
  -r RESPONSE, --response RESPONSE
                        name of column with response values in dataset
  -k KVALUEDATA, --kValueData KVALUEDATA
                        Value for cross validation, this value most be higher
                        or equal 2
  -t {1,2}, --type {1,2}
                        Type of response in dataset: 1. class, 2. prediction





Etapa 0tros: Dividir conjunto de datos en validacion y testeo, recibe como input el % de division y genera la data
en dos conjuntos de datos

Script LauncherSplitDataSet.py

usage: LauncherSplitDataSet.py [-h] -d DATASET -p PATHRESULT
                               [-v VALUEPROPORTION]

optional arguments:
  -h, --help            show this help message and exit
  -d DATASET, --dataSet DATASET
                        full path and name to acces dataSet input process
  -p PATHRESULT, --pathResult PATHRESULT
                        full path for save results
  -v VALUEPROPORTION, --valueProportion VALUEPROPORTION
                        Percentage of training data set, Default 80
